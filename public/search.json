[{"path":"index.html","id":"preface","chapter":"Preface","heading":"Preface","text":"Last update: Sun Dec 27 17:54:31 2020 -0600 (c3c8899)goal minimal book thoroughly testing Python matplotlib notebooks Rmarkdown work seamlessly within RStudio. Making matplotlib run within RStudio using R package reticulate Python Anaconda trivial. Python matplotlib always challenge running part Rmarkdown notebooks RStudio, causing crashes, simply, showing plot bug visualization layers. lately RStudio improved lot! package reticulate RStudio gone complete transformation past months. Enough say, ’s accepted fact today Python R ready work along benefit reproducible data science, machine learning artificial intelligence.","code":""},{"path":"index.html","id":"motivation","chapter":"Preface","heading":"Motivation","text":"provoked transition realization within R community porting -translating code - known machine learning libraries, TensorFlow PyTorch, Python R turning tedious, repetitive redundant task.feeling personally developing rTorch, thing writing wrappers R already existing PyTorch functions. hard work writing new function R routing corresponding function PyTorch. requires class type validation; sticking original length arguments; converting R objects Python, PyTorch objects; test conversion correct; finally return R object. many functions machine libraries, dynamic nature packages change versions, hard keep . rather write machine learning algorithm directly Python within Rmarkdown blocks?testing different ways making task reproducible repeatable several Python libraries, numpy, pandas, scipy, plotnine, scikitlearn, seaborn, others. One hardest libraries get satisfactory results matplotlib, due inline plotting within document. works perfectly r-base ggplot2, R packages. past, matplotlib causing crashes RStudio, simply, didn’t show plot incompatibilities visualization layers. annoying frustrating giving incentive enough write R wrappers Python machine learning packages. Today, situation changed drastically. RStudio taken decision making R Python ecosystems live harmoniously together. new upcoming RStudio 1.4 -preview version testing-, really delivers R Python super-powers. best , great scientifically reproducible Rmarkdown!","code":""},{"path":"index.html","id":"methods","chapter":"Preface","heading":"Methods","text":"","code":""},{"path":"index.html","id":"r-engine","chapter":"Preface","heading":"R engine","text":"Since combine code different sources (R, Python, Bash), added custom colorization code chunks use particular code engine. example using R engine. {-=\"\"}RWhat calling R package reticulate, makes possible communication Python R.way enter block code pretty straightforward; just indicate engine want, , case r, like :shortcut RStudio add R block chunk : Ctrl Alt . Also, customize shortcuts type engines. instance, added Ctrl Alt P creating Python code chunk.","code":"\nlibrary(reticulate)\nreticulate::use_condaenv(\"r-python\")```{r}\nlibrary(reticulate)\nreticulate::use_condaenv(\"r-python\")\n```"},{"path":"index.html","id":"bash-engine","chapter":"Preface","heading":"Bash engine","text":"chunk code engine set bash list conda environments installed available user (machine):ShellTo set block bash, enter like :block execute commands terminal.Note adding parameter decorate=TRUE code block options.","code":"echo \"list all conda environments available\"\nsource ~/miniconda3/etc/profile.d/conda.sh\nconda activate r-python\nconda env list\necho \"working from the terminal\"#:> list all conda environments available\n#:> # conda environments:\n#:> #\n#:> base                     /home/msfz751/miniconda3\n#:> man_ccia                 /home/msfz751/miniconda3/envs/man_ccia\n#:> pybook                   /home/msfz751/miniconda3/envs/pybook\n#:> python_book              /home/msfz751/miniconda3/envs/python_book\n#:> r-ptech                  /home/msfz751/miniconda3/envs/r-ptech\n#:> r-python              *  /home/msfz751/miniconda3/envs/r-python\n#:> r-tensorflow             /home/msfz751/miniconda3/envs/r-tensorflow\n#:> r-torch                  /home/msfz751/miniconda3/envs/r-torch\n#:> \n#:> working from the terminal ```{bash, decorate=TRUE}\necho \"list all conda environments available\"\nsource ~/miniconda3/etc/profile.d/conda.sh\nconda activate r-python\nconda env list\necho \"working from the terminal\"\n```"},{"path":"index.html","id":"python-engine","chapter":"Preface","heading":"Python engine","text":"colorized chunk code shows simple example use matplotlib R. simple example now now color convention different sets code using minimal book.PythonAs may expecting follows pattern want use Python engine. just indicate three backticks, curly brace opened, python, curly brace closed: ```{python}. end Python block three backticks. ’s .want block background color, label, adding parameter decorate=TRUE.","code":"import matplotlib.pyplot as plt\n\nplt.plot([1, 2, 3, 4])\nplt.ylabel('some numbers')\nplt.show() ```{python, decorate=TRUE}\nimport matplotlib.pyplot as plt\n\nplt.plot([1, 2, 3, 4])\nplt.ylabel('some numbers')\nplt.show()\n```"},{"path":"index.html","id":"colorizing-the-code-blocks","chapter":"Preface","heading":"Colorizing the code blocks","text":"add color icon R block, add parameter decorate=TRUE. function hook resides file R/deco_hook.R. course, can modify colors icons engines, add . hook looks like:RYou see using knitr engine name condition formatting block.","code":"\nlibrary(knitr)\n\nknit_hooks$set(decorate = function(before, options) {\n  if (before) {\n     if (options$engine == \"python\") {\n       label <- \"<b>Python<\/b>\"\n       bc <- \"#417FB1\"\n       sz <- \"90%\"\n       tc <- \"#FFD94C\"\n       icon <- \"<i class=\\\"fab fa-python\\\"><\/i>  \"\n     } else if (options$engine == \"R\") {\n       label <- \"<b>R<\/b>\"\n       bc <- \"#4C78DB\"\n       sz <- \"90%\"\n       tc <- \"#ffffff\"\n       icon <- \"<i class=\\\"fab fa-r-project\\\"><\/i>  \"\n     } else if (options$engine == \"bash\") {\n       label <- \"<b>Shell<\/b>\"\n       bc <- \"#000000\"\n       sz <- \"90%\"\n       tc <- \"#ffffff\"\n       icon <- \"<i class=\\\"fas fa-terminal\\\"><\/i>  \"\n     }\n    paste0(\"<div class=decocode>\",\n           \"<div style=\\\"background-color:\", bc, \"\\\">\",\n           \"<span style=\\\"font-size:\", sz, \";color:\", tc, \"\\\">\",\n           icon, label, \"<\/span>\", \"\\n\")\n  } else {\n    \"<\/div><br><\/div>\"\n  }\n}) "},{"path":"introduction.html","id":"introduction","chapter":"Ch. 1 Introduction","heading":"Ch. 1 Introduction","text":"Last update: Thu Nov 19 17:20:43 2020 -0600 (49b93b1)Remember previous chapter said best way obtaining reproducible results writing Python code Rmarkdown creating stand-alone Python environments. next code block written R reticulate::use_condaenv(\"r-python\"), activating Python environment r-python used Python build notebooks written Rmarkdown . Later see create environments.R","code":"\nlibrary(reticulate)\nreticulate::use_condaenv(\"r-python\")"},{"path":"introduction.html","id":"hello-world","chapter":"Ch. 1 Introduction","heading":"1.1 “Hello world”","text":"environment r-python already basic Python libraries, among numpy matplotlib. one simplest examples: plotting sine random numpy array.Python","code":"import matplotlib.pyplot as plt\nimport numpy as np\n\nt = np.arange(0.0, 2.0, 0.01)\ns = 1 + np.sin(2*np.pi*t)\nplt.plot(t, s)\n\nplt.xlabel('time (s)')\nplt.ylabel('voltage (mV)')\nplt.title('About as simple as it gets, folks')\nplt.grid(True)\nplt.savefig(\"test.png\")\nplt.show()"},{"path":"introduction.html","id":"the-parts-of-a-plot","chapter":"Ch. 1 Introduction","heading":"1.2 The parts of a plot","text":"love plot helps formulate right question looking online assistance. Sooner later, need customize \\(x\\) \\(y\\) axis ticks way present specific data points skip defaults. , get rid many $x$ axis labels superimposing one .Python","code":"# https://matplotlib.org/gallery/showcase/anatomy.html#sphx-glr-gallery-showcase-anatomy-py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import AutoMinorLocator, MultipleLocator, FuncFormatter\n\nnp.random.seed(19680801)\n\nX = np.linspace(0.5, 3.5, 100)\nY1 = 3+np.cos(X)\nY2 = 1+np.cos(1+X/0.75)/2\nY3 = np.random.uniform(Y1, Y2, len(X))\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(1, 1, 1, aspect=1)\n\n\ndef minor_tick(x, pos):\n    if not x % 1.0:\n        return \"\"\n    return \"%.2f\" % x\n\nax.xaxis.set_major_locator(MultipleLocator(1.000))\nax.xaxis.set_minor_locator(AutoMinorLocator(4))\nax.yaxis.set_major_locator(MultipleLocator(1.000))\nax.yaxis.set_minor_locator(AutoMinorLocator(4))\nax.xaxis.set_minor_formatter(FuncFormatter(minor_tick))\n\nax.set_xlim(0, 4)\n#:> (0.0, 4.0)\nax.set_ylim(0, 4)\n#:> (0.0, 4.0)\nax.tick_params(which='major', width=1.0)\nax.tick_params(which='major', length=10)\nax.tick_params(which='minor', width=1.0, labelsize=10)\nax.tick_params(which='minor', length=5, labelsize=10, labelcolor='0.25')\n\nax.grid(linestyle=\"--\", linewidth=0.5, color='.25', zorder=-10)\n\nax.plot(X, Y1, c=(0.25, 0.25, 1.00), lw=2, label=\"Blue signal\", zorder=10)\nax.plot(X, Y2, c=(1.00, 0.25, 0.25), lw=2, label=\"Red signal\")\nax.plot(X, Y3, linewidth=0,\n        marker='o', markerfacecolor='w', markeredgecolor='k')\n\nax.set_title(\"Anatomy of a figure\", fontsize=20, verticalalignment='bottom')\nax.set_xlabel(\"X axis label\")\nax.set_ylabel(\"Y axis label\")\nax.legend()\n\n\ndef circle(x, y, radius=0.15):\n    from matplotlib.patches import Circle\n    from matplotlib.patheffects import withStroke\n    circle = Circle((x, y), radius, clip_on=False, zorder=10, linewidth=1,\n                    edgecolor='black', facecolor=(0, 0, 0, .0125),\n                    path_effects=[withStroke(linewidth=5, foreground='w')])\n    ax.add_artist(circle)\n\n\ndef text(x, y, text):\n    ax.text(x, y, text, backgroundcolor=\"white\",\n            ha='center', va='top', weight='bold', color='blue')\n\n# Minor tick\ncircle(0.50, -0.10)\ntext(0.50, -0.32, \"Minor tick label\")\n\n# Major tick\ncircle(-0.03, 4.00)\ntext(0.03, 3.80, \"Major tick\")\n\n# Minor tick\ncircle(0.00, 3.50)\ntext(0.00, 3.30, \"Minor tick\")\n\n# Major tick label\ncircle(-0.15, 3.00)\ntext(-0.15, 2.80, \"Major tick label\")\n\n# X Label\ncircle(1.80, -0.27)\ntext(1.80, -0.45, \"X axis label\")\n\n# Y Label\ncircle(-0.27, 1.80)\ntext(-0.27, 1.6, \"Y axis label\")\n\n# Title\ncircle(1.60, 4.13)\ntext(1.60, 3.93, \"Title\")\n\n# Blue plot\ncircle(1.75, 2.80)\ntext(1.75, 2.60, \"Line\\n(line plot)\")\n\n# Red plot\ncircle(1.20, 0.60)\ntext(1.20, 0.40, \"Line\\n(line plot)\")\n\n# Scatter plot\ncircle(3.20, 1.75)\ntext(3.20, 1.55, \"Markers\\n(scatter plot)\")\n\n# Grid\ncircle(3.00, 3.00)\ntext(3.00, 2.80, \"Grid\")\n\n# Legend\ncircle(3.70, 3.80)\ntext(3.70, 3.60, \"Legend\")\n\n# Axes\ncircle(0.5, 0.5)\ntext(0.5, 0.3, \"Axes\")\n\n# Figure\ncircle(-0.3, 0.65)\ntext(-0.3, 0.45, \"Figure\")\n\ncolor = 'blue'\nax.annotate('Spines', xy=(4.0, 0.35), xycoords='data',\n            xytext=(3.3, 0.5), textcoords='data',\n            weight='bold', color=color,\n            arrowprops=dict(arrowstyle='->',\n                            connectionstyle=\"arc3\",\n                            color=color))\n\nax.annotate('', xy=(3.15, 0.0), xycoords='data',\n            xytext=(3.45, 0.45), textcoords='data',\n            weight='bold', color=color,\n            arrowprops=dict(arrowstyle='->',\n                            connectionstyle=\"arc3\",\n                            color=color))\n\nax.text(4.0, -0.4, \"Made with http://matplotlib.org\",\n        fontsize=10, ha=\"right\", color='.5')\n\nplt.show()"},{"path":"introduction.html","id":"can-do-business-plots-too","chapter":"Ch. 1 Introduction","heading":"1.3 Can do business plots too …","text":"precisely kind plots interested right now, kinds business plots available matplotlib, including infamous pie chart.Python","code":"import numpy as np\nimport matplotlib.pyplot as plt\n\nplt.style.use('ggplot')\n\nfig, axes = plt.subplots(ncols=2, nrows=2)\nax1, ax2, ax3, ax4 = axes.ravel()\n\n# scatter plot (Note: `plt.scatter` doesn't use default colors)\nx, y = np.random.normal(size=(2, 200))\nax1.plot(x, y, 'o')\n\n# sinusoidal lines with colors from default color cycle\nL = 2*np.pi\nx = np.linspace(0, L)\nncolors = len(plt.rcParams['axes.prop_cycle'])\nshift = np.linspace(0, L, ncolors, endpoint=False)\nfor s in shift:\n    ax2.plot(x, np.sin(x + s), '-')\nax2.margins(0)\n\n# bar graphs\nx = np.arange(5)\ny1, y2 = np.random.randint(1, 25, size=(2, 5))\nwidth = 0.25\nax3.bar(x, y1, width)\nax3.bar(x + width, y2, width,\n        color=list(plt.rcParams['axes.prop_cycle'])[2]['color'])\nax3.set_xticks(x + width)\nax3.set_xticklabels(['a', 'b', 'c', 'd', 'e'])\n\n# circles with colors from default color cycle\nfor i, color in enumerate(plt.rcParams['axes.prop_cycle']):\n    xy = np.random.normal(size=2)\n    ax4.add_patch(plt.Circle(xy, radius=0.3, color=color['color']))\nax4.axis('equal')\nax4.margins(0)\nplt.show()"},{"path":"introduction.html","id":"and-real-time","chapter":"Ch. 1 Introduction","heading":"1.4 And real time …","text":"Strip charts favorites plotting real time data, sensors, internet source.Python","code":"# https://matplotlib.org/gallery/lines_bars_and_markers/cohere.html#sphx-glr-gallery-lines-bars-and-markers-cohere-py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\ndt = 0.01\nt = np.arange(0, 30, dt)\nnse1 = np.random.randn(len(t))                 # white noise 1\nnse2 = np.random.randn(len(t))                 # white noise 2\n\n# Two signals with a coherent part at 10Hz and a random part\ns1 = np.sin(2 * np.pi * 10 * t) + nse1\ns2 = np.sin(2 * np.pi * 10 * t) + nse2\n\nfig, axs = plt.subplots(2, 1)\naxs[0].plot(t, s1, t, s2)\naxs[0].set_xlim(0, 2)\naxs[0].set_xlabel('time')\naxs[0].set_ylabel('s1 and s2')\naxs[0].grid(True)\n\ncxy, f = axs[1].cohere(s1, s2, 256, 1. / dt)\naxs[1].set_ylabel('coherence')\n\nfig.tight_layout()\nplt.show()"},{"path":"introduction.html","id":"and-also-3d","chapter":"Ch. 1 Introduction","heading":"1.5 And also 3D …","text":"Although data science 3D plots recommended, compelling case 3D plot explains discovery better 2D plot, , okay justified. rule abusing 3D. trying convey information per square centimeter graphics.Python","code":"# https://matplotlib.org/2.0.2/examples/mplot3d/contour3d_demo.html\n\nfrom mpl_toolkits.mplot3d import axes3d\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nX, Y, Z = axes3d.get_test_data(0.05)\ncset = ax.contour(X, Y, Z, cmap=cm.coolwarm)\nax.clabel(cset, fontsize=9, inline=1)\n\nplt.show()"},{"path":"python-environments.html","id":"python-environments","chapter":"Ch. 2 Python environments","heading":"Ch. 2 Python environments","text":"Last update: Thu Nov 19 17:20:43 2020 -0600 (49b93b1)","code":""},{"path":"python-environments.html","id":"why-virtual-environments","chapter":"Ch. 2 Python environments","heading":"2.1 Why virtual environments?","text":"get repeatable reproducible results running Python code Rmarkdown nothing better creating Python environment.several ways running Python code. minimal book, see two :conda environments, andGNU Python virtualenvBoth work similarly, sense providing isolated, fresh Python environment selected packages, without much interference existing Python operating system. Virtual environments, docker containers, virtual machines several ways virtualizing Python environments. pursue reproducibility: workspace replicate results previous analysis without issues provoked missing dependencies, libraries, operating system environment variables.","code":""},{"path":"python-environments.html","id":"python-virtual-environment-and-r","chapter":"Ch. 2 Python environments","heading":"2.2 Python virtual environment and R","text":"Although, absolutely necessary create virtual environment run Rmarkdown Python notebooks, highly recommended able run selected analysis, , without paying much attention updates upgrades hosting operating system packages updates. means freeze time virtual environment, without disturbing software updates.virtual environment able re-created text file minimum set instructions, list packages, recipe, bring fresh Python environment, months now. , methods creating Python virtual environments, conda virtualenv use text file recipe just .conda file environment.yml. virtualenv, file named requirements.txt. use name want. names just standard, find repository, mean less pain reproducing experiment.","code":""},{"path":"python-environments.html","id":"conda-environments","chapter":"Ch. 2 Python environments","heading":"2.3 conda environments","text":"require installation Anaconda3 platform, pretty straight forward operating systems.want want create conda virtual environment, , many ways :","code":""},{"path":"python-environments.html","id":"environment-with-python-version-specified","chapter":"Ch. 2 Python environments","heading":"2.3.1 environment with Python version specified","text":"example, conda build environment using Python version 3.7. version specified, conda install default.Shell","code":"conda create --name python_env python=3.7"},{"path":"python-environments.html","id":"specify-python-version-and-list-package-names","chapter":"Ch. 2 Python environments","heading":"2.3.2 specify Python version and list package names","text":", leave conda find suitable combination package versions build environment.ShellThe last option -y means install without asking yes .","code":"conda create --name python_book python=3.7 pandas numpy scipy scikit-learn nltk matplotlib seaborn plotnine ipython lxml -y"},{"path":"python-environments.html","id":"specify-python-version-and-version-for-the-packages","chapter":"Ch. 2 Python environments","heading":"2.3.3 specify Python version and version for the packages","text":"recipe strict. looking precise package versions, know worked, run without conflicts bugs.Shell","code":"conda create -n plot_env python=3.7 numpy=1.19 matplotlib=3.3 pandas=1.1 seaborn=0.11"},{"path":"python-environments.html","id":"running-python-from-r","chapter":"Ch. 2 Python environments","heading":"2.4 Running Python from R","text":"Load reticulate library:RLoad Python environment:REnvironments available current settings:RAsk Python available R:R","code":"\nlibrary(reticulate)\nuse_condaenv(\"r-python\")\npy_config()#:> python:         /home/msfz751/miniconda3/envs/r-python/bin/python\n#:> libpython:      /home/msfz751/miniconda3/envs/r-python/lib/libpython3.7m.so\n#:> pythonhome:     /home/msfz751/miniconda3/envs/r-python:/home/msfz751/miniconda3/envs/r-python\n#:> version:        3.7.8 | packaged by conda-forge | (default, Jul 31 2020, 02:25:08)  [GCC 7.5.0]\n#:> numpy:          /home/msfz751/miniconda3/envs/r-python/lib/python3.7/site-packages/numpy\n#:> numpy_version:  1.19.4\n#:> \n#:> python versions found: \n#:>  /home/msfz751/miniconda3/envs/r-python/bin/python\n#:>  /home/msfz751/miniconda3/bin/python3\n#:>  /usr/bin/python3\n#:>  /usr/bin/python\n#:>  /home/msfz751/miniconda3/envs/man_ccia/bin/python\n#:>  /home/msfz751/miniconda3/envs/pybook/bin/python\n#:>  /home/msfz751/miniconda3/envs/python_book/bin/python\n#:>  /home/msfz751/miniconda3/envs/r-ptech/bin/python\n#:>  /home/msfz751/miniconda3/envs/r-tensorflow/bin/python\n#:>  /home/msfz751/miniconda3/envs/r-torch/bin/python\n#:>  /home/msfz751/miniconda3/bin/python\nreticulate::py_available()#:> [1] TRUE"},{"path":"python-environments.html","id":"a-plot-demo","chapter":"Ch. 2 Python environments","heading":"2.5 A plot demo","text":"environment loaded, Python code chunks just run:PythonThe code, type Rmarkdown code block, look like :Remember. open Python block Rmarkdown :close :","code":"# https://github.com/bendichter/brokenaxes\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom brokenaxes import brokenaxes\nimport numpy as np\n\nfig = plt.figure(figsize=(5,5))\nbax = brokenaxes(xlims=((1, 500), (600, 10000)),\n         ylims=((1, 500), (600, 10000)),\n         hspace=.15, xscale='log', yscale='log')\n\nx = np.logspace(0.0, 4, 100)\nbax.loglog(x, x, label='$y=x=10^{0}$ to $10^{4}$')\nbax.legend(loc='best')\nbax.grid(axis='both', which='major', ls='-')\nbax.grid(axis='both', which='minor', ls='--', alpha=0.4)\nbax.set_xlabel('x')\nbax.set_ylabel('y')\nplt.show() ```{python}\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom brokenaxes import brokenaxes\nimport numpy as np\n\nfig = plt.figure(figsize=(5,5))\nbax = brokenaxes(xlims=((1, 500), (600, 10000)),\n     ylims=((1, 500), (600, 10000)),\n         hspace=.15, xscale='log', yscale='log')\n\nx = np.logspace(0.0, 4, 100)\nbax.loglog(x, x, label='\\$y=x=10\\^{0}\\$ to \\$10\\^{4}\\$')\n\nbax.legend(loc='best')\nbax.grid(axis='both', which='major', ls='-')\nbax.grid(axis='both', which='minor', ls='--', alpha=0.4)\nbax.set_xlabel('x')\nbax.set_ylabel('y')\nplt.show()\n``` ```{python}```"},{"path":"sharing-data-objects.html","id":"sharing-data-objects","chapter":"Ch. 3 Sharing data objects","heading":"Ch. 3 Sharing data objects","text":"Last update: Thu Nov 19 17:20:43 2020 -0600 (49b93b1)One advantages running R Python code chunks document can share object variables environment programming languages. functions R excels, functions run better Python. take best worlds.can share object R Python, share Python objects R.","code":""},{"path":"sharing-data-objects.html","id":"from-r-to-python-back-to-r","chapter":"Ch. 3 Sharing data objects","heading":"3.1 From R to Python, back to R","text":"Always load Python environment packages need.RLoad dataset R assign R object. Let’s call autos:RRead R object Python adding prefix r. name R object autos. , assign Python object name autos_py.PythonMake calculation two columns dataset (distance speed), assign new column dataset autos_py['time'].PythonFrom R, read Python object py$autos_py plot dataset new column time, obtained Python. Observe added prefix py$ front Python object autos_py:R","code":"\nlibrary(reticulate)\nuse_condaenv(\"r-python\")\n# R chunk\nautos = cars       # assign cars to autos# Python chunk\nimport numpy\nimport pandas \n\nautos_py = r.autos    # assign to a Python object# Python chunk\nautos_py['time'] = autos_py['dist'] / autos_py['speed']   # calculate on variables\n# R chunk\nplot(py$autos_py)          # plot a Python data object"},{"path":"sharing-data-objects.html","id":"from-python-to-r-back-to-python","chapter":"Ch. 3 Sharing data objects","heading":"3.2 From Python to R, back to Python","text":"","code":""},{"path":"math.html","id":"math","chapter":"Ch. 4 Math","heading":"Ch. 4 Math","text":"Last update: Thu Nov 19 17:20:43 2020 -0600 (49b93b1)R","code":"\nlibrary(reticulate)\nreticulate::use_condaenv(\"r-python\")"},{"path":"math.html","id":"functions","chapter":"Ch. 4 Math","heading":"4.1 Functions","text":"Python","code":"# https://www.geeksforgeeks.org/plot-mathematical-expressions-in-python-using-matplotlib/\n# Import libraries \nimport matplotlib.pyplot as plt \nimport numpy as np \n  \nx = np.linspace(-6, 6, 50) \nfig = plt.figure(figsize = (14, 8)) \n  \n# Plot y = cos(x) \ny = np.cos(x) \nplt.plot(x, y, 'b', label ='cos(x)') \n  \n# Plot degree 2 Taylor polynomial \ny2 = 1 - x**2 / 2\nplt.plot(x, y2, 'r-.', label ='Degree 2') \n  \n# Plot degree 4 Taylor polynomial \ny4 = 1 - x**2 / 2 + x**4 / 24\nplt.plot(x, y4, 'g:', label ='Degree 4') \n  \n# Add features to our figure \nplt.legend() \nplt.grid(True, linestyle =':') \nplt.xlim([-6, 6]) \nplt.ylim([-4, 4]) \n  \nplt.title('Taylor Polynomials of cos(x) at x = 0') \nplt.xlabel('x-axis') \nplt.ylabel('y-axis') \n  \n# Show plot \nplt.show() "},{"path":"math.html","id":"functions-with-latex-labels","chapter":"Ch. 4 Math","heading":"4.2 Functions with Latex labels","text":"Python","code":"# https://www.kaggle.com/sskiing/matplotlib-showcase-examples\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon\n\ndef func(x):\n    return (x - 3) * (x - 5) * (x - 7) + 85\n\na, b = 2, 9  # integral limits\nx = np.linspace(0, 10)\ny = func(x)\n\nfig, ax = plt.subplots(dpi=200)\nplt.plot(x, y, 'r', linewidth=2)\nplt.ylim(ymin=0)\n\n# Make the shaded region\nix = np.linspace(a, b)\niy = func(ix)\nverts = [(a, 0)] + list(zip(ix, iy)) + [(b, 0)]\npoly = Polygon(verts, facecolor='0.9', edgecolor='0.5')\nax.add_patch(poly)\n\nplt.text(0.5 * (a + b), 30, r\"$\\int_a^b f(x)\\mathrm{d}x$\",\n         horizontalalignment='center', fontsize=20)\n\nplt.figtext(0.9, 0.05, '$x$')\nplt.figtext(0.1, 0.9, '$y$')\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.xaxis.set_ticks_position('bottom')\n\nax.set_xticks((a, b))\nax.set_xticklabels(('$a$', '$b$'))\nax.set_yticks([])\nplt.show()"},{"path":"math.html","id":"multiple-functions-in-the-same-plot","chapter":"Ch. 4 Math","heading":"4.3 Multiple functions in the same plot","text":"Python","code":"import matplotlib.pyplot as plt\nimport numpy as np\n\nt = np.arange(0.0, 2.0, 0.01)\n\ns1 = np.sin(2 * np.pi * t)\ns2 = np.exp(-t)\ns3 = s1 * s2\n\nfig, axs = plt.subplots(3, 1, sharex=True)\n# Remove horizontal space between axes\nfig.subplots_adjust(hspace=0)\n\n# Plot each graph, and manually set the y tick values\naxs[0].plot(t, s1)\naxs[0].set_yticks(np.arange(-0.9, 1.0, 0.4))\naxs[0].set_ylim(-1, 1)\naxs[1].plot(t, s2)\naxs[1].set_yticks(np.arange(0.1, 1.0, 0.2))\naxs[1].set_ylim(0, 1)\naxs[2].plot(t, s3)\naxs[2].set_yticks(np.arange(-0.9, 1.0, 0.4))\naxs[2].set_ylim(-1, 1)\nplt.show()"},{"path":"math.html","id":"overlapping-functions","chapter":"Ch. 4 Math","heading":"4.4 Overlapping functions","text":"use subplot arrange two functions. Observe y-axis functions.Python","code":"# https://www.python-course.eu/matplotlib_multiple_figures.php\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef f(t):\n    return np.exp(-t) * np.cos(2*np.pi*t)\ndef g(t):\n    return np.sin(t) * np.cos(1/(t+0.1))\nt1 = np.arange(0.0, 5.0, 0.1)\nt2 = np.arange(0.0, 5.0, 0.02)\nplt.subplot(212)\nplt.plot(t1, g(t1), 'ro', t2, f(t2), 'k')\nplt.grid(color='b', alpha=0.5, linestyle='dashed', linewidth=0.5)\nplt.show()"},{"path":"math.html","id":"surface-functions","chapter":"Ch. 4 Math","heading":"4.5 Surface functions","text":"PythonPythonThis typical example find Matlab books tutorials.Python","code":"# http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_plot3d_ex.html\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure()\nax = Axes3D(fig)\nX = np.arange(-4, 4, 0.25)\nY = np.arange(-4, 4, 0.25)\nX, Y = np.meshgrid(X, Y)\nR = np.sqrt(X ** 2 + Y ** 2)\nZ = np.sin(R)\n\nax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=plt.cm.hot)\nax.contourf(X, Y, Z, zdir='z', offset=-2, cmap=plt.cm.hot)\nax.set_zlim(-2, 2)\nplt.show()# https://matplotlib.org/gallery/mplot3d/offset.html#sphx-glr-gallery-mplot3d-offset-py\n# This import registers the 3D projection, but is otherwise unused.\nfrom mpl_toolkits.mplot3d import Axes3D  # noqa: F401 unused import\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure()\nax = fig.gca(projection='3d')\n\nX, Y = np.mgrid[0:6*np.pi:0.25, 0:4*np.pi:0.25]\nZ = np.sqrt(np.abs(np.cos(X) + np.cos(Y)))\n\nax.plot_surface(X + 1e5, Y + 1e5, Z, cmap='autumn', cstride=2, rstride=2)\n\nax.set_xlabel(\"X label\")\nax.set_ylabel(\"Y label\")\nax.set_zlabel(\"Z label\")\nax.set_zlim(0, 2)\nplt.show()# https://github.com/matplotlib/matplotlib/blob/master/examples/mplot3d/surface3d_radial.py\nfrom mpl_toolkits.mplot3d import Axes3D  # noqa: F401 unused import\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\n# Create the mesh in polar coordinates and compute corresponding Z.\nr = np.linspace(0, 1.25, 50)\np = np.linspace(0, 2*np.pi, 50)\nR, P = np.meshgrid(r, p)\nZ = ((R**2 - 1)**2)\n# Express the mesh in the cartesian system.\nX, Y = R*np.cos(P), R*np.sin(P)\n# Plot the surface.\nax.plot_surface(X, Y, Z, cmap=plt.cm.YlGnBu_r)\n# Tweak the limits and add latex math labels.\nax.set_zlim(0, 1)\nax.set_xlabel(r'$\\phi_\\mathrm{real}$')\nax.set_ylabel(r'$\\phi_\\mathrm{im}$')\nax.set_zlabel(r'$V(\\phi)$')\n\nplt.show()"},{"path":"math.html","id":"d-wireframe","chapter":"Ch. 4 Math","heading":"4.6 3D wireframe","text":"Python","code":"# https://github.com/matplotlib/matplotlib/blob/master/examples/mplot3d/wire3d.py\nfrom mpl_toolkits.mplot3d import axes3d\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\n# Grab some test data.\nX, Y, Z = axes3d.get_test_data(0.05)\n\n# Plot a basic wireframe.\nax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)\n\nplt.show()"},{"path":"math.html","id":"d-contour-plot","chapter":"Ch. 4 Math","heading":"4.7 3D contour plot","text":"Python","code":"# https://matplotlib.org/2.0.2/examples/mplot3d/contour3d_demo.html\nfrom mpl_toolkits.mplot3d import axes3d\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nX, Y, Z = axes3d.get_test_data(0.05)\ncset = ax.contour(X, Y, Z, cmap=cm.coolwarm)\nax.clabel(cset, fontsize=9, inline=1)\n\nplt.show()"},{"path":"math.html","id":"machine-learning","chapter":"Ch. 4 Math","heading":"4.8 Machine Learning","text":"just one sample discovering patterns machine learning.Python","code":"import numpy as np\nfrom matplotlib import pyplot as plt\nfrom sklearn import neighbors, datasets\nfrom matplotlib.colors import ListedColormap\n\n# Create color maps for 3-class classification problem, as with iris\ncmap_light = ListedColormap(['#FFAAAA','#AAFFAA','#AAAAFF'])\ncmap_bold = ListedColormap(['#FF0000','#00FF00','#0000FF'])\n\niris = datasets.load_iris()\nX = iris.data[:, :2]  # we only take the first two features. We could\n                      # avoid this ugly slicing by using a two-dim dataset\ny = iris.target\nknn = neighbors.KNeighborsClassifier(n_neighbors=1)\nknn.fit(X, y)\nx_min, x_max = X[:, 0].min() - .1, X[:, 0].max() + .1\ny_min, y_max = X[:, 1].min() - .1, X[:, 1].max() + .1\nxx, yy = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))\n\nZ = knn.predict(np.c_[xx.ravel(), yy.ravel()])\n\nZ = Z.reshape(xx.shape)\nplt.figure()\nplt.pcolormesh(xx, yy, Z, cmap=cmap_light)\n\n# Plot also the training points\nplt.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap_bold)\nplt.xlabel('sepal length (cm)')\nplt.ylabel('sepal width (cm)')\nplt.axis('tight')\nplt.show()"},{"path":"scientific.html","id":"scientific","chapter":"Ch. 5 Scientific","heading":"Ch. 5 Scientific","text":"Last update: Thu Nov 19 17:17:30 2020 -0600 (f99c21d)R","code":"\nlibrary(reticulate)\nreticulate::use_condaenv(\"r-python\")"},{"path":"scientific.html","id":"solve-computational-physics-problems","chapter":"Ch. 5 Scientific","heading":"5.1 Solve Computational Physics Problems","text":"Python","code":"# https://www.codeproject.com/Articles/1087025/Using-Python-to-Solve-Computational-Physics-Proble\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Set maximum iteration\nmaxIter = 500\n\n# Set Dimension and delta\nlenX = lenY = 20 #we set it rectangular\ndelta = 1\n\n# Boundary condition\nTtop = 100\nTbottom = 0\nTleft = 0\nTright = 30\n\n# Initial guess of interior grid\nTguess = 30\n\n# Set colour interpolation and colour map.\n# You can try set it to 10, or 100 to see the difference\n# You can also try: colourMap = plt.cm.coolwarm\ncolorinterpolation = 50\ncolourMap = plt.cm.jet\n\n# Set meshgrid\nX, Y = np.meshgrid(np.arange(0, lenX), np.arange(0, lenY))\n\n# Set array size and set the interior value with Tguess\nT = np.empty((lenX, lenY))\nT.fill(Tguess)\n\n# Set Boundary condition\nT[(lenY-1):, :] = Ttop\nT[:1, :] = Tbottom\nT[:, (lenX-1):] = Tright\nT[:, :1] = Tleft\n\n# Iteration (We assume that the iteration is convergence in maxIter = 500)\nprint(\"Please wait for a moment\")\nfor iteration in range(0, maxIter):\n    for i in range(1, lenX-1, delta):\n        for j in range(1, lenY-1, delta):\n            T[i, j] = 0.25 * (T[i+1][j] + T[i-1][j] + T[i][j+1] + T[i][j-1])\n\nprint(\"Iteration finished\")\n\n# Configure the contour\nplt.title(\"Contour of Temperature\")\nplt.contourf(X, Y, T, colorinterpolation, cmap=colourMap)\n\n# Set Colorbar\nplt.colorbar()\n\n# Show the result in the plot window\nplt.show()"},{"path":"scientific.html","id":"find-electric-potential-in-a-square-wire","chapter":"Ch. 5 Scientific","heading":"5.2 Find electric potential in a square wire","text":"Python","code":"# https://www.eidos.ic.i.u-tokyo.ac.jp/~tau/lecture/computational_physics/docs/computational_physics.pdf\n# Page 404. Figure 17.1\n# Solve Laplace equation\nfrom numpy import * \nimport matplotlib.pylab as lab\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nprint(\"Initializing\")\nNmax = 100; Niter = 70; V = zeros((Nmax, Nmax), float) # float maybe Float\n\nprint(\"Working hard, wait for the figure while I count to 60\")\nfor k in range(0, Nmax-1):  V[k,0] = 100.0      # line at 100V\n\nfor iter in range(Niter):                       # iterations over algorithm\n    if iter % 10 == 0: print(iter)\n    for i in range(1, Nmax-2):\n        for j in range(1,Nmax-2): V[i,j] = 0.25 * (V[i+1,j] + V[i-1,j] + V[i,j+1] + V[i,j-1])\nx = range(0, Nmax-1, 2); y = range(0, 50, 2)     # plot every other point\nX, Y = lab.meshgrid(x, y)\n\ndef functz(V):                                    # Function returns V(x, y)\n    z = V[X,Y]\n    return z\n\nZ = functz(V)\nfig = lab.figure()                          # Create figures\nax = Axes3D(fig)                            # plot axes\nax.plot_wireframe(X, Y, Z, color = 'r')     # red wireframe\nax.set_xlabel('X')                          # label axes\nax.set_ylabel('Y')\nax.set_zlabel('Potential')\nlab.show()                                  # display fig, close shell to quit"},{"path":"scientific.html","id":"eigenvalue-problems","chapter":"Ch. 5 Scientific","heading":"5.3 Eigenvalue problems","text":"lobpcg (Locally Optimal Block Preconditioned Conjugate Gradient Method) * works well combination PyAMG (example Nathan Bell)Python","code":"# http://scipy-lectures.org/_downloads/ScipyLectures-simple.pdf\n# Page 348\n# Compute eigenvectors and eigenvalues using a preconditioned eigensolver\n# ========================================================================\n# In this example Smoothed Aggregation (SA) is used to precondition\n# the LOBPCG eigensolver on a two-dimensional Poisson problem with\n# Dirichlet boundary conditions.\nimport scipy\nfrom scipy.sparse.linalg import lobpcg\nimport matplotlib.pyplot as plt\nfrom pyamg import smoothed_aggregation_solver\nfrom pyamg.gallery import poisson\n\nN = 100\nK = 9\nA = poisson((N,N), format='csr')\n# create the AMG hierarchy\nml = smoothed_aggregation_solver(A)\n# initial approximation to the K eigenvectors\nX = scipy.rand(A.shape[0], K)\n# preconditioner based on ml\nM = ml.aspreconditioner()\n# compute eigenvalues and eigenvectors with LOBPCG\nW,V = lobpcg(A, X, M=M, tol=1e-8, largest=False)\n\nplt.figure(figsize=(9,9))\n# iterate through the subplots adding data points\nfor i in range(K):\n    plt.subplot(3, 3, i+1)\n    plt.title('Eigenvector%d'% i)\n    plt.pcolor(V[:,i].reshape(N,N))\n    plt.axis('equal')\n    plt.axis('off')\nplt.show()"},{"path":"scientific.html","id":"computational-physics","chapter":"Ch. 5 Scientific","heading":"5.4 Computational Physics","text":"PythonPythonPython","code":"# Plot of the Lorenz Attractor based on Edward Lorenz's 1963 \"Deterministic\n# Nonperiodic Flow\" publication.\n# http://journals.ametsoc.org/doi/abs/10.1175/1520-0469%281963%29020%3C0130%3ADNF%3E2.0.CO%3B2\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n\ndef lorenz(x, y, z, s=10, r=28, b=2.667):\n    x_dot = s*(y - x)\n    y_dot = r*x - y - x*z\n    z_dot = x*y - b*z\n    return x_dot, y_dot, z_dot\n# parameters\ndt = 0.01\nstepCnt = 10000\n# Need one more for the initial values\nxs = np.empty((stepCnt + 1,))\nys = np.empty((stepCnt + 1,))\nzs = np.empty((stepCnt + 1,))\n# Setting initial values\nxs[0], ys[0], zs[0] = (0., 1., 1.05)\n# Stepping through \"time\".\nfor i in range(stepCnt):\n    # Derivatives of the X, Y, Z state\n    x_dot, y_dot, z_dot = lorenz(xs[i], ys[i], zs[i])\n    xs[i + 1] = xs[i] + (x_dot * dt)\n    ys[i + 1] = ys[i] + (y_dot * dt)\n    zs[i + 1] = zs[i] + (z_dot * dt)\n\nfig = plt.figure()\nax = fig.gca(projection='3d')\n\nax.plot(xs, ys, zs, lw=0.5)\nax.set_xlabel(\"X Axis\")\nax.set_ylabel(\"Y Axis\")\nax.set_zlabel(\"Z Axis\")\nax.set_title(\"Lorenz Attractor\")\n\nplt.show()# https://matplotlib.org/gallery/images_contours_and_fields/contour_image.html#sphx-glr-gallery-images-contours-and-fields-contour-image-py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib import cm\n# Default delta is large because that makes it fast, and it illustrates\n# the correct registration between image and contours.\ndelta = 0.5\n\nextent = (-3, 4, -4, 3)\n\nx = np.arange(-3.0, 4.001, delta)\ny = np.arange(-4.0, 3.001, delta)\nX, Y = np.meshgrid(x, y)\nZ1 = np.exp(-X**2 - Y**2)\nZ2 = np.exp(-(X - 1)**2 - (Y - 1)**2)\nZ = (Z1 - Z2) * 2\n\n# Boost the upper limit to avoid truncation errors.\nlevels = np.arange(-2.0, 1.601, 0.4)\n\nnorm = cm.colors.Normalize(vmax=abs(Z).max(), vmin=-abs(Z).max())\ncmap = cm.PRGn\n\nfig, _axs = plt.subplots(nrows=2, ncols=2)\nfig.subplots_adjust(hspace=0.3)\naxs = _axs.flatten()\n\ncset1 = axs[0].contourf(X, Y, Z, levels, norm=norm,\n                     cmap=cm.get_cmap(cmap, len(levels) - 1))\n# It is not necessary, but for the colormap, we need only the\n# number of levels minus 1.  To avoid discretization error, use\n# either this number or a large number such as the default (256).\n\n# If we want lines as well as filled regions, we need to call\n# contour separately; don't try to change the edgecolor or edgewidth\n# of the polygons in the collections returned by contourf.\n# Use levels output from previous call to guarantee they are the same.\ncset2 = axs[0].contour(X, Y, Z, cset1.levels, colors='k')\n\n# We don't really need dashed contour lines to indicate negative\n# regions, so let's turn them off.\nfor c in cset2.collections:\n    c.set_linestyle('solid')\n\n# It is easier here to make a separate call to contour than\n# to set up an array of colors and linewidths.\n# We are making a thick green line as a zero contour.\n# Specify the zero level as a tuple with only 0 in it.\ncset3 = axs[0].contour(X, Y, Z, (0,), colors='g', linewidths=2)\naxs[0].set_title('Filled contours')\nfig.colorbar(cset1, ax=axs[0])\naxs[1].imshow(Z, extent=extent, cmap=cmap, norm=norm)\naxs[1].contour(Z, levels, colors='k', origin='upper', extent=extent)\naxs[1].set_title(\"Image, origin 'upper'\")\n\naxs[2].imshow(Z, origin='lower', extent=extent, cmap=cmap, norm=norm)\naxs[2].contour(Z, levels, colors='k', origin='lower', extent=extent)\naxs[2].set_title(\"Image, origin 'lower'\")\n\n# We will use the interpolation \"nearest\" here to show the actual\n# image pixels.\n# Note that the contour lines don't extend to the edge of the box.\n# This is intentional. The Z values are defined at the center of each\n# image pixel (each color block on the following subplot), so the\n# domain that is contoured does not extend beyond these pixel centers.\nim = axs[3].imshow(Z, interpolation='nearest', extent=extent,\n                cmap=cmap, norm=norm)\naxs[3].contour(Z, levels, colors='k', origin='image', extent=extent)\nylim = axs[3].get_ylim()\naxs[3].set_ylim(ylim[::-1])\naxs[3].set_title(\"Origin from rc, reversed y-axis\")\nfig.colorbar(im, ax=axs[3])\nfig.tight_layout()\nplt.show()# https://matplotlib.org/gallery/images_contours_and_fields/irregulardatagrid.html#sphx-glr-gallery-images-contours-and-fields-irregulardatagrid-py\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nimport numpy as np\n\nnp.random.seed(19680801)\nnpts = 200\nngridx = 100\nngridy = 200\nx = np.random.uniform(-2, 2, npts)\ny = np.random.uniform(-2, 2, npts)\nz = x * np.exp(-x**2 - y**2)\n\nfig, (ax1, ax2) = plt.subplots(nrows=2)\n\n# -----------------------\n# Interpolation on a grid\n# -----------------------\n# A contour plot of irregularly spaced data coordinates\n# via interpolation on a grid.\n\n# Create grid values first.\nxi = np.linspace(-2.1, 2.1, ngridx)\nyi = np.linspace(-2.1, 2.1, ngridy)\n\n# Perform linear interpolation of the data (x,y)\n# on a grid defined by (xi,yi)\ntriang = tri.Triangulation(x, y)\ninterpolator = tri.LinearTriInterpolator(triang, z)\nXi, Yi = np.meshgrid(xi, yi)\nzi = interpolator(Xi, Yi)\n\n# Note that scipy.interpolate provides means to interpolate data on a grid\n# as well. The following would be an alternative to the four lines above:\n#from scipy.interpolate import griddata\n#zi = griddata((x, y), z, (xi[None,:], yi[:,None]), method='linear')\nax1.contour(xi, yi, zi, 14, linewidths=0.5, colors='k')\ncntr1 = ax1.contourf(xi, yi, zi, 14, cmap=\"RdBu_r\")\n\nfig.colorbar(cntr1, ax=ax1)\nax1.plot(x, y, 'ko', ms=3)\nax1.axis((-2, 2, -2, 2))\nax1.set_title('grid and contour (%d points, %d grid points)' %\n              (npts, ngridx * ngridy))\n# ----------\n# Tricontour\n# ----------\n# Directly supply the unordered, irregularly spaced coordinates\n# to tricontour.\nax2.tricontour(x, y, z, 14, linewidths=0.5, colors='k')\ncntr2 = ax2.tricontourf(x, y, z, 14, cmap=\"RdBu_r\")\n\nfig.colorbar(cntr2, ax=ax2)\nax2.plot(x, y, 'ko', ms=3)\nax2.axis((-2, 2, -2, 2))\nax2.set_title('tricontour (%d points)' % npts)\n\nplt.subplots_adjust(hspace=0.5)\nplt.show()"},{"path":"scientific.html","id":"triangulation-and-delauney-maps","chapter":"Ch. 5 Scientific","heading":"5.5 Triangulation and Delauney maps","text":"PythonPython","code":"from matplotlib.tri import Triangulation, TriAnalyzer, UniformTriRefiner\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport numpy as np\n#-----------------------------------------------------------------------------\n# Analytical test function\n#-----------------------------------------------------------------------------\ndef experiment_res(x, y):\n    \"\"\" An analytic function representing experiment results \"\"\"\n    x = 2. * x\n    r1 = np.sqrt((0.5 - x)**2 + (0.5 - y)**2)\n    theta1 = np.arctan2(0.5 - x, 0.5 - y)\n    r2 = np.sqrt((-x - 0.2)**2 + (-y - 0.2)**2)\n    theta2 = np.arctan2(-x - 0.2, -y - 0.2)\n    z = (4 * (np.exp((r1 / 10)**2) - 1) * 30. * np.cos(3 * theta1) +\n         (np.exp((r2 / 10)**2) - 1) * 30. * np.cos(5 * theta2) +\n         2 * (x**2 + y**2))\n    return (np.max(z) - z) / (np.max(z) - np.min(z))\n\n#-----------------------------------------------------------------------------\n# Generating the initial data test points and triangulation for the demo\n#-----------------------------------------------------------------------------\n# User parameters for data test points\nn_test = 200  # Number of test data points, tested from 3 to 5000 for subdiv=3\n\nsubdiv = 3  # Number of recursive subdivisions of the initial mesh for smooth\n            # plots. Values >3 might result in a very high number of triangles\n            # for the refine mesh: new triangles numbering = (4**subdiv)*ntri\n\ninit_mask_frac = 0.0    # Float > 0. adjusting the proportion of\n                        # (invalid) initial triangles which will be masked\n                        # out. Enter 0 for no mask.\n\nmin_circle_ratio = .01  # Minimum circle ratio - border triangles with circle\n                        # ratio below this will be masked if they touch a\n                        # border. Suggested value 0.01; use -1 to keep\n                        # all triangles.\n\n# Random points\nrandom_gen = np.random.RandomState(seed=19680801)\nx_test = random_gen.uniform(-1., 1., size=n_test)\ny_test = random_gen.uniform(-1., 1., size=n_test)\nz_test = experiment_res(x_test, y_test)\n# meshing with Delaunay triangulation\ntri = Triangulation(x_test, y_test)\nntri = tri.triangles.shape[0]\n# Some invalid data are masked out\nmask_init = np.zeros(ntri, dtype=bool)\nmasked_tri = random_gen.randint(0, ntri, int(ntri * init_mask_frac))\nmask_init[masked_tri] = True\ntri.set_mask(mask_init)\n#-----------------------------------------------------------------------------\n# Improving the triangulation before high-res plots: removing flat triangles\n#-----------------------------------------------------------------------------\n# masking badly shaped triangles at the border of the triangular mesh.\nmask = TriAnalyzer(tri).get_flat_tri_mask(min_circle_ratio)\ntri.set_mask(mask)\n# refining the data\nrefiner = UniformTriRefiner(tri)\ntri_refi, z_test_refi = refiner.refine_field(z_test, subdiv=subdiv)\n# analytical 'results' for comparison\nz_expected = experiment_res(tri_refi.x, tri_refi.y)\n# for the demo: loading the 'flat' triangles for plot\nflat_tri = Triangulation(x_test, y_test)\nflat_tri.set_mask(~mask)\n#-----------------------------------------------------------------------------\n# Now the plots\n#-----------------------------------------------------------------------------\n# User options for plots\nplot_tri = True          # plot of base triangulation\nplot_masked_tri = True   # plot of excessively flat excluded triangles\nplot_refi_tri = False    # plot of refined triangulation\nplot_expected = False    # plot of analytical function values for comparison\n\n# Graphical options for tricontouring\nlevels = np.arange(0., 1., 0.025)\ncmap = cm.get_cmap(name='Blues', lut=None)\n\nfig, ax = plt.subplots()\nax.set_aspect('equal')\nax.set_title(\"Filtering a Delaunay mesh\\n\" +\n          \"(application to high-resolution tricontouring)\")\n\n# 1) plot of the refined (computed) data contours:\nax.tricontour(tri_refi, z_test_refi, levels=levels, cmap=cmap,\n               linewidths=[2.0, 0.5, 1.0, 0.5])\n# 2) plot of the expected (analytical) data contours (dashed):\nif plot_expected:\n    ax.tricontour(tri_refi, z_expected, levels=levels, cmap=cmap,\n                   linestyles='--')\n# 3) plot of the fine mesh on which interpolation was done:\nif plot_refi_tri:\n    ax.triplot(tri_refi, color='0.97')\n# 4) plot of the initial 'coarse' mesh:\nif plot_tri:\n    ax.triplot(tri, color='0.7')\n# 4) plot of the unvalidated triangles from naive Delaunay Triangulation:\nif plot_masked_tri:\n    ax.triplot(flat_tri, color='red')\nplt.show()# https://matplotlib.org/gallery/images_contours_and_fields/triinterp_demo.html#sphx-glr-gallery-images-contours-and-fields-triinterp-demo-py\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as mtri\nimport numpy as np\n\n# Create triangulation.\nx = np.asarray([0, 1, 2, 3, 0.5, 1.5, 2.5, 1, 2, 1.5])\ny = np.asarray([0, 0, 0, 0, 1.0, 1.0, 1.0, 2, 2, 3.0])\ntriangles = [[0, 1, 4], [1, 2, 5], [2, 3, 6], [1, 5, 4], [2, 6, 5], [4, 5, 7],\n             [5, 6, 8], [5, 8, 7], [7, 8, 9]]\ntriang = mtri.Triangulation(x, y, triangles)\n\n# Interpolate to regularly-spaced quad grid.\nz = np.cos(1.5 * x) * np.cos(1.5 * y)\nxi, yi = np.meshgrid(np.linspace(0, 3, 20), np.linspace(0, 3, 20))\n\ninterp_lin = mtri.LinearTriInterpolator(triang, z)\nzi_lin = interp_lin(xi, yi)\n\ninterp_cubic_geom = mtri.CubicTriInterpolator(triang, z, kind='geom')\nzi_cubic_geom = interp_cubic_geom(xi, yi)\n\ninterp_cubic_min_E = mtri.CubicTriInterpolator(triang, z, kind='min_E')\nzi_cubic_min_E = interp_cubic_min_E(xi, yi)\n\n# Set up the figure\nfig, axs = plt.subplots(nrows=2, ncols=2)\naxs = axs.flatten()\n\n# Plot the triangulation.\naxs[0].tricontourf(triang, z)\naxs[0].triplot(triang, 'ko-')\naxs[0].set_title('Triangular grid')\n\n# Plot linear interpolation to quad grid.\naxs[1].contourf(xi, yi, zi_lin)\naxs[1].plot(xi, yi, 'k-', lw=0.5, alpha=0.5)\naxs[1].plot(xi.T, yi.T, 'k-', lw=0.5, alpha=0.5)\naxs[1].set_title(\"Linear interpolation\")\n\n# Plot cubic interpolation to quad grid, kind=geom\naxs[2].contourf(xi, yi, zi_cubic_geom)\naxs[2].plot(xi, yi, 'k-', lw=0.5, alpha=0.5)\naxs[2].plot(xi.T, yi.T, 'k-', lw=0.5, alpha=0.5)\naxs[2].set_title(\"Cubic interpolation,\\nkind='geom'\")\n\n# Plot cubic interpolation to quad grid, kind=min_E\naxs[3].contourf(xi, yi, zi_cubic_min_E)\naxs[3].plot(xi, yi, 'k-', lw=0.5, alpha=0.5)\naxs[3].plot(xi.T, yi.T, 'k-', lw=0.5, alpha=0.5)\naxs[3].set_title(\"Cubic interpolation,\\nkind='min_E'\")\n\nfig.tight_layout()\nplt.show()"},{"path":"scientific.html","id":"contour-maps","chapter":"Ch. 5 Scientific","heading":"5.6 Contour maps","text":"Python","code":"# http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_contour_ex.html\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef f(x, y):\n    return (1 - x / 2 + x ** 5 + y ** 3) * np.exp(-x ** 2 -y ** 2)\n\nn = 256\nx = np.linspace(-3, 3, n)\ny = np.linspace(-3, 3, n)\nX,Y = np.meshgrid(x, y)\n\nplt.axes([0.025, 0.025, 0.95, 0.95])\n\nplt.contourf(X, Y, f(X, Y), 8, alpha=.75, cmap=plt.cm.hot)\nC = plt.contour(X, Y, f(X, Y), 8, colors='black', linewidth=.5)\nplt.clabel(C, inline=1, fontsize=10)\nplt.xticks(())\nplt.yticks(())\nplt.show()"},{"path":"scientific.html","id":"real-time","chapter":"Ch. 5 Scientific","heading":"5.7 Real time","text":"PythonPythonPython","code":"# https://matplotlib.org/gallery/lines_bars_and_markers/cohere.html#sphx-glr-gallery-lines-bars-and-markers-cohere-py\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\ndt = 0.01\nt = np.arange(0, 30, dt)\nnse1 = np.random.randn(len(t))                 # white noise 1\nnse2 = np.random.randn(len(t))                 # white noise 2\n\n# Two signals with a coherent part at 10Hz and a random part\ns1 = np.sin(2 * np.pi * 10 * t) + nse1\ns2 = np.sin(2 * np.pi * 10 * t) + nse2\n\nfig, axs = plt.subplots(2, 1)\naxs[0].plot(t, s1, t, s2)\naxs[0].set_xlim(0, 2)\naxs[0].set_xlabel('time')\naxs[0].set_ylabel('s1 and s2')\naxs[0].grid(True)\n\ncxy, f = axs[1].cohere(s1, s2, 256, 1. / dt)\naxs[1].set_ylabel('coherence')\n\nfig.tight_layout()\nplt.show()# https://matplotlib.org/gallery/scales/symlog_demo.html#sphx-glr-gallery-scales-symlog-demo-py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndt = 0.01\nx = np.arange(-50.0, 50.0, dt)\ny = np.arange(0, 100.0, dt)\n\nplt.subplot(311)\nplt.plot(x, y)\nplt.xscale('symlog')\nplt.ylabel('symlogx')\nplt.grid(True)\nplt.gca().xaxis.grid(True, which='minor')  # minor grid on too\n\nplt.subplot(312)\nplt.plot(y, x)\nplt.yscale('symlog')\nplt.ylabel('symlogy')\n\nplt.subplot(313)\nplt.plot(x, np.sin(x / 3.0))\nplt.xscale('symlog')\nplt.yscale('symlog', linthreshy=0.015)\nplt.grid(True)\nplt.ylabel('symlog both')\n\nplt.tight_layout()\nplt.show()# https://matplotlib.org/gallery/lines_bars_and_markers/step_demo.html#sphx-glr-gallery-lines-bars-and-markers-step-demo-py\nimport numpy as np\nfrom numpy import ma\nimport matplotlib.pyplot as plt\n\nx = np.arange(1, 7, 0.4)\ny0 = np.sin(x)\ny = y0.copy() + 2.5\n\nplt.step(x, y, label='pre (default)')\n\ny -= 0.5\nplt.step(x, y, where='mid', label='mid')\n\ny -= 0.5\nplt.step(x, y, where='post', label='post')\n\ny = ma.masked_where((y0 > -0.15) & (y0 < 0.15), y - 0.5)\nplt.step(x, y, label='masked (pre)')\n\nplt.legend()\n\nplt.xlim(0, 7)\nplt.ylim(-0.5, 4)\nplt.show()"},{"path":"scientific.html","id":"density-plots","chapter":"Ch. 5 Scientific","heading":"5.8 Density plots","text":"Python","code":"# https://blogs.umass.edu/candela/computational-physics-in-python/\n# Visualize the interference from two point sources, vectorized version.\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom numpy import pi,sqrt,sin\n\nwavelength = 5e-2     # wavelength (m) (this is 5cm as in Newman)\nk = 2*pi/wavelength   # wavenumber (m^-1)\naa0 = 1.0             # amplitude of the waves (arb. units)\nseparation = 20e-2    # separation of centers (m)\nside = 100e-2         # side of the square (m)\npoints = 500          # number of grid points along each side\n\n# Calculate the positions of the centers of the circles\nx1 = side/2 + separation/2\ny1 = side/2\nx2 = side/2 - separation/2\ny2 = side/2\n\n# Calculate an array aas with the sum of the two waves at a grid of points\nxs = np.linspace(0,side,points)                 # row vector of x's\nys = np.linspace(0,side,points)[:,np.newaxis]   # column vector of y's\nr1s = sqrt((xs-x1)**2+(ys-y1)**2)\nr2s = sqrt((xs-x2)**2+(ys-y2)**2)\naas = aa0*sin(k*r1s) + aa0*sin(k*r2s)\n\n# Make the plot\nplt.figure(figsize=(9,6)) \nplt.imshow(aas,origin='lower',extent=[0,side,0,side])\nplt.xlabel('x (m)')\nplt.ylabel('y (m)')\n# plt.gray()\nplt.colorbar()\nplt.show()"},{"path":"voxels.html","id":"voxels","chapter":"Ch. 6 Voxels","heading":"Ch. 6 Voxels","text":"Last update: Thu Nov 19 17:20:43 2020 -0600 (49b93b1)R","code":"\nlibrary(reticulate)\n# reticulate::use_condaenv(\"r-python\")\nreticulate::use_condaenv(\"pybook\")"},{"path":"voxels.html","id":"radial","chapter":"Ch. 6 Voxels","heading":"6.1 Radial","text":"Python","code":"# https://matplotlib.org/api/_as_gen/mpl_toolkits.mplot3d.axes3d.Axes3D.html\n#=======================================================\n#3D voxel / volumetric plot with cylindrical coordinates\n#=======================================================\n#Demonstrates using the ``x, y, z`` arguments of ``ax.voxels``.\nimport matplotlib.pyplot as plt\nimport matplotlib.colors\nimport numpy as np\n\n# This import registers the 3D projection, but is otherwise unused.\nfrom mpl_toolkits.mplot3d import Axes3D  # noqa: F401 unused import\n\ndef midpoints(x):\n    sl = ()\n    for i in range(x.ndim):\n        x = (x[sl + np.index_exp[:-1]] + x[sl + np.index_exp[1:]]) / 2.0\n        sl += np.index_exp[:]\n    return x\n\n# prepare some coordinates, and attach rgb values to each\nr, theta, z = np.mgrid[0:1:11j, 0:np.pi*2:25j, -0.5:0.5:11j]\nx = r*np.cos(theta)\ny = r*np.sin(theta)\n\nrc, thetac, zc = midpoints(r), midpoints(theta), midpoints(z)\n\n# define a wobbly torus about [0.7, *, 0]\nsphere = (rc - 0.7)**2 + (zc + 0.2*np.cos(thetac*2))**2 < 0.2**2\n# combine the color components\nhsv = np.zeros(sphere.shape + (3,))\nhsv[..., 0] = thetac / (np.pi*2)\nhsv[..., 1] = rc\nhsv[..., 2] = zc + 0.5\ncolors = matplotlib.colors.hsv_to_rgb(hsv)\n# and plot everything\nfig = plt.figure()\nax = fig.gca(projection='3d')\nax.voxels(x, y, z, sphere,\n          facecolors=colors,\n          edgecolors=np.clip(2*colors - 0.5, 0, 1),  # brighter\n          linewidth=0.5)\nplt.show()"},{"path":"voxels.html","id":"spherical","chapter":"Ch. 6 Voxels","heading":"6.2 Spherical","text":"Python","code":"import matplotlib.pyplot as plt\nimport numpy as np\n\n# This import registers the 3D projection, but is otherwise unused.\nfrom mpl_toolkits.mplot3d import Axes3D  # noqa: F401 unused import\n\n\ndef midpoints(x):\n    sl = ()\n    for i in range(x.ndim):\n        x = (x[sl + np.index_exp[:-1]] + x[sl + np.index_exp[1:]]) / 2.0\n        sl += np.index_exp[:]\n    return x\n\n# prepare some coordinates, and attach rgb values to each\nr, g, b = np.indices((17, 17, 17)) / 16.0\nrc = midpoints(r)\ngc = midpoints(g)\nbc = midpoints(b)\n# define a sphere about [0.5, 0.5, 0.5]\nsphere = (rc - 0.5)**2 + (gc - 0.5)**2 + (bc - 0.5)**2 < 0.5**2\n# combine the color components\ncolors = np.zeros(sphere.shape + (3,))\ncolors[..., 0] = rc\ncolors[..., 1] = gc\ncolors[..., 2] = bc\n# and plot everything\nfig = plt.figure()\nax = fig.gca(projection='3d')\nax.voxels(r, g, b, sphere,\n          facecolors=colors,\n          edgecolors=np.clip(2*colors - 0.5, 0, 1),  # brighter\n          linewidth=0.5)\nax.set(xlabel='r', ylabel='g', zlabel='b')\nplt.show()"},{"path":"voxels.html","id":"solid-cubes","chapter":"Ch. 6 Voxels","heading":"6.3 Solid cubes","text":"PythonPython","code":"# https://github.com/matplotlib/matplotlib/blob/master/examples/mplot3d/voxels.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n# This import registers the 3D projection, but is otherwise unused.\nfrom mpl_toolkits.mplot3d import Axes3D  # noqa: F401 unused import\n\n# prepare some coordinates\nx, y, z = np.indices((8, 8, 8))\n\n# draw cuboids in the top left and bottom right corners, and a link between them\ncube1 = (x < 3) & (y < 3) & (z < 3)\ncube2 = (x >= 5) & (y >= 5) & (z >= 5)\nlink = abs(x - y) + abs(y - z) + abs(z - x) <= 2\n\n# combine the objects into a single boolean array\nvoxels = cube1 | cube2 | link\n\n# set the colors of each object\ncolors = np.empty(voxels.shape, dtype=object)\ncolors[link] = 'red'\ncolors[cube1] = 'blue'\ncolors[cube2] = 'green'\n\n# and plot everything\nfig = plt.figure()\nax = fig.gca(projection='3d')\nax.voxels(voxels, facecolors=colors, edgecolor='k')\nplt.show()# https://stackoverflow.com/a/49281004/5270873\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef cuboid_data2(o, size=(1,1,1)):\n    X = [[[0, 1, 0], [0, 0, 0], [1, 0, 0], [1, 1, 0]],\n         [[0, 0, 0], [0, 0, 1], [1, 0, 1], [1, 0, 0]],\n         [[1, 0, 1], [1, 0, 0], [1, 1, 0], [1, 1, 1]],\n         [[0, 0, 1], [0, 0, 0], [0, 1, 0], [0, 1, 1]],\n         [[0, 1, 0], [0, 1, 1], [1, 1, 1], [1, 1, 0]],\n         [[0, 1, 1], [0, 0, 1], [1, 0, 1], [1, 1, 1]]]\n    X = np.array(X).astype(float)\n    for i in range(3):\n        X[:,:,i] *= size[i]\n    X += np.array(o)\n    return X\n\ndef plotCubeAt2(positions,sizes=None,colors=None, **kwargs):\n    if not isinstance(colors,(list,np.ndarray)): colors=[\"C0\"]*len(positions)\n    if not isinstance(sizes,(list,np.ndarray)): sizes=[(1,1,1)]*len(positions)\n    g = []\n    for p,s,c in zip(positions,sizes,colors):\n        g.append( cuboid_data2(p, size=s) )\n    return Poly3DCollection(np.concatenate(g),  \n                            facecolors=np.repeat(colors,6), **kwargs)\n\n\npositions = [(-3,5,-2),(1,7,1)]\nsizes = [(4,5,3), (3,3,7)]\ncolors = [\"crimson\",\"limegreen\"]\n\nfig = plt.figure()\nax = fig.gca(projection='3d')\nax.set_aspect('auto')\n\npc = plotCubeAt2(positions,sizes,colors=colors, edgecolor=\"k\")\nax.add_collection3d(pc)    \n\nax.set_xlim([-4,6])\nax.set_ylim([4,13])\nax.set_zlim([-3,9])\nplt.show()"},{"path":"voxels.html","id":"transparent-cubicles","chapter":"Ch. 6 Voxels","heading":"6.4 Transparent cubicles","text":"PythonPythonPython","code":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\ndef make_ax(grid=False):\n    fig = plt.figure()\n    ax = fig.gca(projection='3d')\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"y\")\n    ax.set_zlabel(\"z\")\n    ax.grid(grid)\n    return ax\n\nfilled = np.array([\n    [[1, 0, 1], [0, 0, 1], [0, 1, 0]],\n    [[0, 1, 1], [1, 0, 0], [1, 0, 1]],\n    [[1, 1, 0], [1, 1, 1], [0, 0, 0]]\n])\n\ndef explode(data):\n    shape_arr = np.array(data.shape)\n    size = shape_arr[:3]*2 - 1\n    exploded = np.zeros(np.concatenate([size, shape_arr[3:]]), dtype=data.dtype)\n    exploded[::2, ::2, ::2] = data\n    return exploded\n    \ndef expand_coordinates(indices):\n    x, y, z = indices\n    x[1::2, :, :] += 1\n    y[:, 1::2, :] += 1\n    z[:, :, 1::2] += 1\n    return x, y, z\n\nax = make_ax()\ncolors = np.array([[['#1f77b430']*3]*3]*3)\ncolors[1,1,1] = '#ff0000ff'\ncolors = explode(colors)\nfilled = explode(np.ones((3, 3, 3)))\nx, y, z = expand_coordinates(np.indices(np.array(filled.shape) + 1))\nax.voxels(x, y, z, filled, facecolors=colors, edgecolors='gray')\nplt.show()import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\ndef make_ax(grid=False):\n    fig = plt.figure()\n    ax = fig.gca(projection='3d')\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"y\")\n    ax.set_zlabel(\"z\")\n    ax.grid(grid)\n    return ax\n\nfilled = np.array([\n    [[1, 0, 1], [0, 0, 1], [0, 1, 0]],\n    [[0, 1, 1], [1, 0, 0], [1, 0, 1]],\n    [[1, 1, 0], [1, 1, 1], [0, 0, 0]]\n])\n\nax = make_ax()\nax.voxels(filled, facecolors='#1f77b430', edgecolors='gray')\nplt.show()import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\ndef make_ax(grid=False):\n    fig = plt.figure()\n    ax = fig.gca(projection='3d')\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"y\")\n    ax.set_zlabel(\"z\")\n    ax.grid(grid)\n    return ax\n\nfilled = np.array([\n    [[1, 0, 1], [0, 0, 1], [0, 1, 0]],\n    [[0, 1, 1], [1, 0, 0], [1, 0, 1]],\n    [[1, 1, 0], [1, 1, 1], [0, 0, 0]]\n])\n\nax = make_ax()\nax.voxels(np.ones((3, 3, 3)), facecolors='#1f77b430', edgecolors='gray')\nplt.show()"},{"path":"voxels.html","id":"semi-transparent","chapter":"Ch. 6 Voxels","heading":"6.5 Semi-transparent","text":"Python","code":"# https://matplotlib.org/gallery/mplot3d/voxels_numpy_logo.html\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# This import registers the 3D projection, but is otherwise unused.\nfrom mpl_toolkits.mplot3d import Axes3D  # noqa: F401 unused import\n\n\ndef explode(data):\n    size = np.array(data.shape)*2\n    data_e = np.zeros(size - 1, dtype=data.dtype)\n    data_e[::2, ::2, ::2] = data\n    return data_e\n\n# build up the numpy logo\nn_voxels = np.zeros((4, 3, 4), dtype=bool)\nn_voxels[0, 0, :] = True\nn_voxels[-1, 0, :] = True\nn_voxels[1, 0, 2] = True\nn_voxels[2, 0, 1] = True\nfacecolors = np.where(n_voxels, '#FFD65DC0', '#7A88CCC0')\nedgecolors = np.where(n_voxels, '#BFAB6E', '#7D84A6')\nfilled = np.ones(n_voxels.shape)\n\n# upscale the above voxel image, leaving gaps\nfilled_2 = explode(filled)\nfcolors_2 = explode(facecolors)\necolors_2 = explode(edgecolors)\n\n# Shrink the gaps\nx, y, z = np.indices(np.array(filled_2.shape) + 1).astype(float) // 2\nx[0::2, :, :] += 0.05\ny[:, 0::2, :] += 0.05\nz[:, :, 0::2] += 0.05\nx[1::2, :, :] += 0.95\ny[:, 1::2, :] += 0.95\nz[:, :, 1::2] += 0.95\n\nfig = plt.figure()\nax = fig.gca(projection='3d')\nax.voxels(x, y, z, filled_2, facecolors=fcolors_2, edgecolors=ecolors_2)\nplt.show()"},{"path":"voxels.html","id":"opaque-cubicles","chapter":"Ch. 6 Voxels","heading":"6.6 Opaque cubicles","text":"Python","code":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\ndef make_ax(grid=False):\n    fig = plt.figure()\n    ax = fig.gca(projection='3d')\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"y\")\n    ax.set_zlabel(\"z\")\n    ax.grid(grid)\n    return ax\n\nfilled = np.array([\n    [[1, 0, 1], [0, 0, 1], [0, 1, 0]],\n    [[0, 1, 1], [1, 0, 0], [1, 0, 1]],\n    [[1, 1, 0], [1, 1, 1], [0, 0, 0]]\n])\n\nax = make_ax(True)\nax.voxels(filled, edgecolors='gray')\nplt.show()"},{"path":"seaborn.html","id":"seaborn","chapter":"Ch. 7 Seaborn","heading":"Ch. 7 Seaborn","text":"Last update: Thu Nov 5 19:22:01 2020 -0600 (5124cef)R","code":"\nlibrary(reticulate)\nuse_condaenv(\"r-python\", required = TRUE)"},{"path":"seaborn.html","id":"error-bands","chapter":"Ch. 7 Seaborn","heading":"7.1 Error bands","text":"Python","code":"# https://seaborn.pydata.org/examples/errorband_lineplots.html\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_theme(style=\"darkgrid\")\n\n# Load an example dataset with long-form data\nfmri = sns.load_dataset(\"fmri\")\n\n# Plot the responses for different events and regions\nsns.lineplot(x=\"timepoint\", y=\"signal\",\n             hue=\"region\", style=\"event\",\n             data=fmri)\nplt.show()"},{"path":"seaborn.html","id":"boxplots","chapter":"Ch. 7 Seaborn","heading":"7.2 Boxplots","text":"Python","code":"# https://seaborn.pydata.org/examples/horizontal_boxplot.html\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_theme(style=\"ticks\")\n\n# Initialize the figure with a logarithmic x axis\nf, ax = plt.subplots(figsize=(7, 6))\nax.set_xscale(\"log\")\n\n# Load the example planets dataset\nplanets = sns.load_dataset(\"planets\")\n# Plot the orbital period with horizontal boxes\nsns.boxplot(x=\"distance\", y=\"method\", data=planets,\n            whis=[0, 100], width=.6, palette=\"vlag\")\n# Add in points to show each observation\nsns.stripplot(x=\"distance\", y=\"method\", data=planets,\n              size=4, color=\".3\", linewidth=0)\n# Tweak the visual presentation\nax.xaxis.grid(True)\nax.set(ylabel=\"\")\nsns.despine(trim=True, left=True)\n\nplt.show()"},{"path":"seaborn.html","id":"facets","chapter":"Ch. 7 Seaborn","heading":"7.3 Facets","text":"PythonPython","code":"# https://seaborn.pydata.org/examples/timeseries_facets.html\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_theme(style=\"dark\")\nflights = sns.load_dataset(\"flights\")\n\n# Plot each year's time series in its own facet\ng = sns.relplot(\n    data=flights,\n    x=\"month\", y=\"passengers\", col=\"year\", hue=\"year\",\n    kind=\"line\", palette=\"crest\", linewidth=4, zorder=5,\n    col_wrap=3, height=2, aspect=1.5, legend=False,\n)\n\n# Iterate over each subplot to customize further\nfor year, ax in g.axes_dict.items():\n\n    # Add the title as an annotation within the plot\n    ax.text(.8, .85, year, transform=ax.transAxes, fontweight=\"bold\")\n\n    # Plot every year's time series in the background\n    sns.lineplot(\n        data=flights, x=\"month\", y=\"passengers\", units=\"year\",\n        estimator=None, color=\".7\", linewidth=1, ax=ax,\n    )\n# Reduce the frequency of the x axis ticks\nax.set_xticks(ax.get_xticks()[::2])\n# Tweak the supporting aspects of the plot\ng.set_titles(\"\")\ng.set_axis_labels(\"\", \"Passengers\")\ng.tight_layout()\n\nplt.show()import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_theme(style=\"darkgrid\")\n\ntips = sns.load_dataset(\"tips\")\nfmri = sns.load_dataset(\"fmri\")\n\nsns.relplot(x=\"timepoint\", y=\"signal\", hue=\"event\", style=\"event\",\n            col=\"subject\", col_wrap=5,\n            height=3, aspect=.75, linewidth=2.5,\n            kind=\"line\", data=fmri.query(\"region == 'frontal'\"));\n\nplt.show()"},{"path":"seaborn.html","id":"functions-1","chapter":"Ch. 7 Seaborn","heading":"7.4 Functions","text":"Python","code":"from __future__ import print_function, division\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nx = np.linspace(0, 10, 1000)\nplt.style.use('ggplot')\nplt.plot(x, np.sin(x), x, np.cos(x));\nplt.show()"},{"path":"seaborn.html","id":"scatter-plot-matrix","chapter":"Ch. 7 Seaborn","heading":"7.5 Scatter plot matrix","text":"Python","code":"# https://seaborn.pydata.org/examples/scatterplot_matrix.html\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_theme(style=\"ticks\")\n\ndf = sns.load_dataset(\"penguins\")\nsns.pairplot(df, hue=\"species\")\nplt.show()"},{"path":"advanced.html","id":"advanced","chapter":"Ch. 8 Advanced","heading":"Ch. 8 Advanced","text":"Last update: Thu Nov 5 19:22:01 2020 -0600 (5124cef)R","code":"\nlibrary(reticulate)\nreticulate::use_condaenv(\"r-python\")"},{"path":"advanced.html","id":"adding-labels","chapter":"Ch. 8 Advanced","heading":"8.1 Adding labels","text":"Math symbols printing Latex.\\(r's(t) = \\mathcal{}\\/\\sin(2 \\omega t)'\\)\\(\\mathbb{blackboard}\\)PythonPython","code":"import matplotlib.pyplot as plt\nimport numpy as np\n\nmu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n\n# the histogram of the data\nn, bins, patches = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\n\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()# http://scipy-lectures.org/_downloads/ScipyLectures-simple.pdf\nimport numpy as np\nimport matplotlib.pyplot as plt\n\neqs = []\n\neqs.append((r\"$W^{3\\beta}_{\\delta_1 \\rho_1 \\sigma_2} = U^{3\\beta}_{\\delta_1 \\rho_1} + \\frac{1} {8 \\pi 2} \\int^{\\alpha_2}_{\\alpha_2} d \\alpha^\\prime_2 \\left[\\frac{ U^{2\\beta}_{\\delta_1 \\rho_1} - \\alpha^\\prime_2U^{1\\beta}_{\\rho_1 \\sigma_2}}{U^{0\\beta}_{\\rho_1 \\sigma_2}} \\right]$\"))    # eq1\neqs.append((r\"$\\frac{d\\rho}{d t} + \\rho \\vec{v}\\cdot\\nabla\\vec{v} = -\\nabla p + \\mu\\nabla^2 \\vec{v} + \\rho \\vec{g}$\"))   # eq2\neqs.append((r\"$\\int_{-\\infty}^\\infty e^{-x^2}dx=\\sqrt{\\pi}$\"))   # eq3\neqs.append((r\"$E = mc^2 = \\sqrt{ {m_0}^2 c^4 + p^2 c^2}$\"))      # eq4\neqs.append((r\"$F_G = G\\frac{m_1m_2}{r^2}$\"))                     # eq5\n\nplt.axes([0.025, 0.025, 0.95, 0.95])\n\nfor i in range(24):\n    index = np.random.randint(0, len(eqs))\n    eq = eqs[index]\n    size = np.random.uniform(12, 32)\n    x,y = np.random.uniform(0, 1, 2)\n    alpha = np.random.uniform(0.25, .75)\n    plt.text(x, y, eq, ha='center', va='center', color=\"#11557c\", alpha=alpha,transform=plt.gca().transAxes, fontsize=size, clip_on=True)\n\nplt.xticks([])\nplt.yticks([])\nplt.show()"},{"path":"advanced.html","id":"subplots","chapter":"Ch. 8 Advanced","heading":"8.2 Subplots","text":"PythonPythonPythonPythonPython","code":"# https://matplotlib.org/gallery/subplots_axes_and_figures/subplots_adjust.html#sphx-glr-gallery-subplots-axes-and-figures-subplots-adjust-py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nplt.subplot(211)\nplt.imshow(np.random.random((100, 100)), cmap=plt.cm.BuPu_r)\nplt.subplot(212)\nplt.imshow(np.random.random((100, 100)), cmap=plt.cm.BuPu_r)\n\nplt.subplots_adjust(bottom=0.1, right=0.8, top=0.9)\ncax = plt.axes([0.85, 0.1, 0.075, 0.8])\nplt.colorbar(cax=cax)\nplt.show()# https://matplotlib.org/gallery/text_labels_and_annotations/figlegend_demo.html#sphx-glr-gallery-text-labels-and-annotations-figlegend-demo-py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(1, 2)\n\nx = np.arange(0.0, 2.0, 0.02)\ny1 = np.sin(2 * np.pi * x)\ny2 = np.exp(-x)\nl1, l2 = axs[0].plot(x, y1, 'rs-', x, y2, 'go')\n\ny3 = np.sin(4 * np.pi * x)\ny4 = np.exp(-2 * x)\nl3, l4 = axs[1].plot(x, y3, 'yd-', x, y4, 'k^')\n\nfig.legend((l1, l2), ('Line 1', 'Line 2'), 'upper left')\nfig.legend((l3, l4), ('Line 3', 'Line 4'), 'upper right')\n\nplt.tight_layout()\nplt.show()import matplotlib.pyplot as plt\nimport numpy as np\n\nnames = ['group_a', 'group_b', 'group_c']\nvalues = [1, 10, 100]\n\nplt.figure(figsize=(9, 3))\n\nplt.subplot(131)\nplt.bar(names, values)\nplt.subplot(132)\nplt.scatter(names, values)\nplt.subplot(133)\nplt.plot(names, values)\nplt.suptitle('Categorical Plotting')\nplt.show()# https://www.python-course.eu/matplotlib_multiple_figures.php\nimport matplotlib.gridspec as gridspec\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure(figsize=(6, 4))\nG = gridspec.GridSpec(3, 3)\nX = np.linspace(0, 2 * np.pi, 50, endpoint=True)\nF1 = 2.8 * np.cos(X)\nF2 = 5 * np.sin(X)\nF3 = 0.3 * np.sin(X)\naxes_1 = plt.subplot(G[0, :])\naxes_1.plot(X, F1, 'r-', X, F2)\naxes_2 = plt.subplot(G[1, :-1])\naxes_2.plot(X, F3)\naxes_3 = plt.subplot(G[1:, -1])\naxes_3.plot([1,2,3,4], [1,10,100,1000], 'b-')\naxes_4 = plt.subplot(G[-1, 0])\naxes_4.plot([1,2,3,4], [47, 11, 42, 60], 'r-')\naxes_5 = plt.subplot(G[-1, -2])\naxes_5.plot([1,2,3,4], [7, 5, 4, 3.8])\nplt.tight_layout()\nplt.show()# https://matplotlib.org/gallery/text_labels_and_annotations/figlegend_demo.html#sphx-glr-gallery-text-labels-and-annotations-figlegend-demo-py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(1, 2)\n\nx = np.arange(0.0, 2.0, 0.02)\ny1 = np.sin(2 * np.pi * x)\ny2 = np.exp(-x)\nl1, l2 = axs[0].plot(x, y1, 'rs-', x, y2, 'go')\n\ny3 = np.sin(4 * np.pi * x)\ny4 = np.exp(-2 * x)\nl3, l4 = axs[1].plot(x, y3, 'yd-', x, y4, 'k^')\n\nfig.legend((l1, l2), ('Line 1', 'Line 2'), 'upper left')\nfig.legend((l3, l4), ('Line 3', 'Line 4'), 'upper right')\n\nplt.tight_layout()\nplt.show()"},{"path":"advanced.html","id":"change-of-axes","chapter":"Ch. 8 Advanced","heading":"8.3 Change of axes","text":"Python","code":"import numpy as np\nimport matplotlib.pyplot as plt\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# make up some data in the open interval (0, 1)\ny = np.random.normal(loc=0.5, scale=0.4, size=1000)\ny = y[(y > 0) & (y < 1)]\ny.sort()\nx = np.arange(len(y))\n\n# plot with various axes scales\nplt.figure()\n\n# linear\nplt.subplot(221)\nplt.plot(x, y)\nplt.yscale('linear')\nplt.title('linear')\nplt.grid(True)\n\n# log\nplt.subplot(222)\nplt.plot(x, y)\nplt.yscale('log')\nplt.title('log')\nplt.grid(True)\n\n# symmetric log\nplt.subplot(223)\nplt.plot(x, y - y.mean())\nplt.yscale('symlog', linthresh=0.01)\nplt.title('symlog')\nplt.grid(True)\n\n# logit\nplt.subplot(224)\nplt.plot(x, y)\nplt.yscale('logit')\nplt.title('logit')\nplt.grid(True)\n# Adjust the subplot layout, because the logit one may take more space\n# than usual, due to y-tick labels like \"1 - 10^{-3}\"\nplt.subplots_adjust(top=0.92, bottom=0.08, left=0.10, right=0.95, hspace=0.25,\n                    wspace=0.35)\n\nplt.show()"},{"path":"beyond-matplotlib.html","id":"beyond-matplotlib","chapter":"Ch. 9 Beyond matplotlib","heading":"Ch. 9 Beyond matplotlib","text":"Last update: Thu Nov 19 17:20:43 2020 -0600 (49b93b1)R","code":"\nlibrary(reticulate)\nreticulate::use_condaenv(\"r-python\")"},{"path":"beyond-matplotlib.html","id":"brokenaxis","chapter":"Ch. 9 Beyond matplotlib","heading":"9.1 brokenaxis","text":"","code":""},{"path":"beyond-matplotlib.html","id":"usage","chapter":"Ch. 9 Beyond matplotlib","heading":"9.1.1 Usage","text":"Python","code":"# https://github.com/bendichter/brokenaxes/blob/master/examples/plot_usage.py\nimport matplotlib.pyplot as plt\nfrom brokenaxes import brokenaxes\nimport numpy as np\n\nfig = plt.figure(figsize=(5,2))\nbax = brokenaxes(xlims=((0, .1), (.4, .7)), ylims=((-1, .7), (.79, 1)), hspace=.05)\nx = np.linspace(0, 1, 100)\nbax.plot(x, np.sin(10 * x), label='sin')\nbax.plot(x, np.cos(10 * x), label='cos')\nbax.legend(loc=3)\nbax.set_xlabel('time')\nbax.set_ylabel('value')\nplt.show()"},{"path":"beyond-matplotlib.html","id":"subplots-1","chapter":"Ch. 9 Beyond matplotlib","heading":"9.1.2 Subplots","text":"Python","code":"# https://github.com/bendichter/brokenaxes/blob/master/examples/plot_subplots.py\nfrom brokenaxes import brokenaxes\nfrom matplotlib.gridspec import GridSpec\nimport numpy as np\n\nsps1, sps2 = GridSpec(2,1)\n\nbax = brokenaxes(xlims=((.1, .3),(.7, .8)), subplot_spec=sps1)\nx = np.linspace(0, 1, 100)\nbax.plot(x, np.sin(x*30), ls=':', color='m')\nx = np.random.poisson(3, 1000)\nbax = brokenaxes(xlims=((0, 2.5), (3, 6)), subplot_spec=sps2)\nbax.hist(x, histtype='bar')\nplt.show()"},{"path":"beyond-matplotlib.html","id":"log-scales","chapter":"Ch. 9 Beyond matplotlib","heading":"9.1.3 Log scales","text":"Python","code":"# https://github.com/bendichter/brokenaxes/blob/master/examples/plot_logscales.py\n# Log scales\n# ==========\n# Brokenaxe compute automatically the correct layout for a 1:1 scale. However, for\n# logarithmic scales, the 1:1 scale has to be adapted. This is done via the\n# `yscale` or `xscale` arguments.\nimport matplotlib.pyplot as plt\nfrom brokenaxes import brokenaxes\nimport numpy as np\n\nfig = plt.figure(figsize=(5,5))\nbax = brokenaxes(xlims=((1, 500), (600, 10000)),\n         ylims=((1, 500), (600, 10000)),\n         hspace=.15, xscale='log', yscale='log')\n\nx = np.logspace(0.0, 4, 100)\nbax.loglog(x, x, label='$y=x=10^{0}$ to $10^{4}$')\nbax.legend(loc='best')\nbax.grid(axis='both', which='major', ls='-')\nbax.grid(axis='both', which='minor', ls='--', alpha=0.4)\nbax.set_xlabel('x')\nbax.set_ylabel('y')\nplt.show()"},{"path":"beyond-matplotlib.html","id":"different-scales","chapter":"Ch. 9 Beyond matplotlib","heading":"9.1.4 Different scales","text":"Python","code":"# https://github.com/bendichter/brokenaxes/blob/master/examples/plot_different_scales.py\n# Different scales with brokenaxes\n# ================================\n# This example shows how to customize the scales and the ticks of each broken\n# axes.\n#############################################################################\n# brokenaxes lets you choose the aspect ratio of each sub-axes thanks to the\n# `height_ratios` and `width_ratios` to over-pass the default 1:1 scale for all\n# axes. However, by default the ticks spacing are still identical for all axes.\n# In this example, we present how to customize the ticks of your brokenaxes.\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom brokenaxes import brokenaxes\nimport matplotlib.ticker as ticker\n\ndef make_plot():\n    x = np.linspace(0, 5*2*np.pi, 300)\n    y1 = np.sin(x)*100\n    y2 = np.sin(x+np.pi)*5 + 90\n    y3 = 30*np.exp(-x) - 50\n    y4 = 90 + (1-np.exp(6/x))\n\n    bax = brokenaxes(\n        ylims=[(-100, 0), (80, 100)],\n        xlims=[(0, 5), (10, 30)],\n        height_ratios=[1, 3],\n        width_ratios=[3, 5]\n    )\n\n    bax.plot(x, y1, label=\"Big sin\")\n    bax.plot(x, y2, label=\"Small sin\")\n    bax.plot(x, y3, label=\"Exponential 1\")\n    bax.plot(x, y4, '--', label=\"Exponential 2\")\n\n    bax.legend(loc=\"lower right\")\n    bax.set_title(\"Example for different scales for the x and y axis\")\n\n    return bax\n\n#############################################################################\n# Use the AutoLocator() ticker\n# ----------------------------\nplt.figure()\nbax = make_plot()\n\n# Then, we get the different axes created and set the ticks according to the\n# axe x and y limits.\nfor i, ax in enumerate(bax.last_row):\n    ax.xaxis.set_major_locator(ticker.AutoLocator())\n    ax.set_xlabel('xscale {i}'.format(i=i))\nfor i, ax in enumerate(bax.first_col):\n    ax.yaxis.set_major_locator(ticker.AutoLocator())\n    ax.set_ylabel('yscale {i}'.format(i=i))\n\n##############################################################################\n# .. note:: It is not necessary to loop through all the axes since they all\n#      share the same x and y limits in a given column or row.\n\n\n##############################################################################\n# Manually set the ticks\n# ----------------------\n# Since brokenaxes return normal matplotlib axes, you could also set them\n# manually.\nfig2 = plt.figure()\nbax = make_plot()\nbax.first_col[0].set_yticks([80, 85, 90, 95, 100])\nbax.first_col[1].set_yticks([-100, -50, 0])\nbax.last_row[0].set_xticks([0, 1, 2, 3, 4, 5])\nbax.last_row[1].set_xticks([10, 20, 30])\nplt.show()"},{"path":"beyond-matplotlib.html","id":"yellowbrick","chapter":"Ch. 9 Beyond matplotlib","heading":"9.2 yellowbrick","text":"","code":""},{"path":"beyond-matplotlib.html","id":"pearson-correlation","chapter":"Ch. 9 Beyond matplotlib","heading":"9.2.1 Pearson correlation","text":"PythonPython","code":"# https://www.scikit-yb.org/en/latest/quickstart.html\nimport pandas as pd\nfrom yellowbrick.datasets import load_bikeshare\nX, y = load_bikeshare()\nprint(X.head())#:>    season  year  month  hour  holiday  weekday  workingday  weather  temp  feelslike  humidity  windspeed\n#:> 0       1     0      1     0        0        6           0        1  0.24     0.2879      0.81        0.0\n#:> 1       1     0      1     1        0        6           0        1  0.22     0.2727      0.80        0.0\n#:> 2       1     0      1     2        0        6           0        1  0.22     0.2727      0.80        0.0\n#:> 3       1     0      1     3        0        6           0        1  0.24     0.2879      0.75        0.0\n#:> 4       1     0      1     4        0        6           0        1  0.24     0.2879      0.75        0.0from yellowbrick.features import Rank2D\nvisualizer = Rank2D(algorithm=\"pearson\")\nvisualizer.fit_transform(X)\nvisualizer.show()"},{"path":"beyond-matplotlib.html","id":"scatter-diagram","chapter":"Ch. 9 Beyond matplotlib","heading":"9.2.2 Scatter diagram","text":"Python","code":"# https://www.scikit-yb.org/en/latest//quickstart-2.py\nfrom yellowbrick.features import JointPlotVisualizer\nvisualizer = JointPlotVisualizer(columns=['temp', 'feelslike'])\nvisualizer.fit_transform(X, y)\nvisualizer.show()"},{"path":"beyond-matplotlib.html","id":"residuals-plot","chapter":"Ch. 9 Beyond matplotlib","heading":"9.2.3 Residuals plot","text":"Python","code":"# https://www.scikit-yb.org/en/latest//quickstart-3.py\nfrom yellowbrick.regressor import ResidualsPlot\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\n# Create training and test sets\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.1\n)\nvisualizer = ResidualsPlot(LinearRegression())\nvisualizer.fit(X_train, y_train)\nvisualizer.score(X_test, y_test)\nvisualizer.show()"},{"path":"beyond-matplotlib.html","id":"discrimination-threshold","chapter":"Ch. 9 Beyond matplotlib","heading":"9.2.4 Discrimination threshold","text":"Python","code":"from yellowbrick.classifier import discrimination_threshold\nfrom sklearn.linear_model import LogisticRegression\nfrom yellowbrick.datasets import load_spam\n\nX, y = load_spam()\nvisualizer = discrimination_threshold(\n    LogisticRegression(multi_class=\"auto\", solver=\"liblinear\"), X, y\n)"},{"path":"beyond-matplotlib.html","id":"intercluster-distance","chapter":"Ch. 9 Beyond matplotlib","heading":"9.2.5 Intercluster distance","text":"Python","code":"# https://www.scikit-yb.org/en/latest//oneliners-17.py\nfrom yellowbrick.datasets import load_nfl\nfrom sklearn.cluster import MiniBatchKMeans\nfrom yellowbrick.cluster import intercluster_distance\n\nX, y = load_nfl()\nvisualizer = intercluster_distance(MiniBatchKMeans(5, random_state=777), X)"}]
